# -*- coding: utf-8 -*-
"""Rock vs Mine Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NQ-yc-dkaoFSPRTYFX7lzkaJSHuXSABi
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score



"""Data Collection and Processing"""

#Loading the dataset into a Pandas DataFrame
sonar_data = pd.read_csv('/content/drive/MyDrive/sonar_data.csv', header = None)

sonar_data.head()

sonar_data.shape

sonar_data.describe()

sonar_data[60].value_counts()

sonar_data.groupby(60).mean() #checking the difference beween values for Mines and Rocks

# separating the data and the labels
X = sonar_data.drop(columns=60, axis=1)
Y = sonar_data[60]

print(X)
print(Y)

Xtrain, Xtest, Ytrain, Ytest = train_test_split(X,Y, test_size=0.1, stratify=Y, random_state=1)

print(X.shape, Xtrain.shape, Xtest.shape)

"""## Model Training"""

model = LogisticRegression() #model loading

#training the Logistic Regression model with training data
model.fit(Xtrain, Ytrain)

"""Evaluation"""

#accuracy on training data
Xtrain_prediction = model.predict(Xtrain)
training_data_accuracy = accuracy_score(Xtrain_prediction,Ytrain)

print('Accuracy on training data : ', training_data_accuracy)

#accuracy on training data
Xtest_prediction = model.predict(Xtest)
test_data_accuracy = accuracy_score(Xtest_prediction, Ytest)

print('Accuracy on test data : ', test_data_accuracy)

"""## Predictor System"""

input_data = (0.0217,0.0152,0.0346,0.0346,0.0484,0.0526,0.0773,0.0862,0.1451,0.2110,0.2343,0.2087,0.1645,0.1689,0.1650,0.1967,0.2934,0.3709,0.4309,0.4161,0.5116,0.6501,0.7717,0.8491,0.9104,0.8912,0.8189,0.6779,0.5368,0.5207,0.5651,0.5749,0.5250,0.4255,0.3330,0.2331,0.1451,0.1648,0.2694,0.3730,0.4467,0.4133,0.3743,0.3021,0.2069,0.1790,0.1689,0.1341,0.0769,0.0222,0.0205,0.0123,0.0067,0.0011,0.0026,0.0049,0.0029,0.0022,0.0022,0.0032)

#changing data to np array
arraydata = np.asarray(input_data)

# reshape the np array as we are predicting for one instance
reshapedarray = arraydata.reshape(1,-1)

prediction = model.predict(reshapedarray)
print(prediction)

if (prediction[0]== 'R'):
    print('The object is a Rock')
else:
    print('The object is a mine')

